# .github/workflows/release-publisher.yml
# This workflow orchestrates the release process through a series of modular jobs.

name: Release Publisher

on:
    workflow_dispatch:
        inputs:
            tag:
                description: "The tag to create the release for (e.g., v1.0.0)"
                required: true

permissions:
    contents: write
    id-token: write

jobs:
    # Job 1: Parse Configuration
    # Reads the release manifest and sets outputs for other jobs.
    parse_configs:
        name: Parse Release Configs
        runs-on: ubuntu-latest
        outputs:
            skip_approval: ${{ steps.parse.outputs.skip_approval }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v6
              with:
                  python-version: "3.12"

            - name: Install Dependencies
              run: pip install tomllib

            - name: Parse Manifest
              id: parse
              run: |
                  output=$(python .github/release.d/parse_config_outputs.py)
                  echo "$output" >> $GITHUB_OUTPUT

    # Job 2: Run Pre-flight Checks
    # Depends on config parsing and runs verification scripts.
    check:
        name: Run Pre-flight Checks
        needs: parse_configs
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Run Check Script
              run: bash .github/release.d/python-check.sh

    # Job 3: Build Artifacts
    # Depends on checks and runs the build script.
    build:
        name: Build Artifacts
        needs: check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Run Build Script
              run: bash .github/release.d/build-python.sh

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: dist
                  path: dist/

    # Job 4: Manual Approval Gate
    # Runs only if `skip_approval` is false.
    approval:
        name: Manual Approval
        needs: build
        if: ${{ needs.parse_configs.outputs.skip_approval == 'false' }}
        runs-on: ubuntu-latest
        environment: release
        steps:
            - name: Wait for manual approval
              run: echo "Waiting for manual approval. Review build artifacts and logs, then approve the job to continue."

    # Job 5: Create GitHub Release
    # Always runs, but succeeds only if approval was skipped or successful.
    release:
        name: Create GitHub Release
        needs: [parse_configs, approval]
        if: ${{ always() && (needs.parse_configs.outputs.skip_approval == 'true' || needs.approval.result == 'success') }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  # fetch-depth: 0 is required to get all tags for changelog generation.
                  fetch-depth: 0

            - name: Set up Python
              uses: actions/setup-python@v6
              with:
                  python-version: "3.12"

            - name: Install Dependencies
              run: pip install tomllib

            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                  name: dist
                  path: dist/

            - name: Generate Release Notes
              id: generate_notes
              run: |
                  python .github/release.d/generate-release-notes.py \
                    --tag "${{ github.event.inputs.tag }}" \
                    --notes-file "release_notes.md"

            - name: Create GitHub Release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh release create "${{ github.event.inputs.tag }}" \
                    --title "Release ${{ github.event.inputs.tag }}" \
                    --notes-file "release_notes.md" \
                    dist/*
