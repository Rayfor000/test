name: Release Publisher
on:
    workflow_dispatch:
        inputs:
            tag:
                description: "The tag to create the release for (e.g., v1.0.0)"
                required: true

permissions:
    contents: write
    id-token: write

jobs:
    parse_configs:
        name: Parse Configuration Files
        runs-on: ubuntu-latest
        outputs:
            # from actions-config.yml
            check_matrix: ${{ steps.yaml.outputs.check_matrix }}
            build_matrix: ${{ steps.yaml.outputs.build_matrix }}
            # from release-manifest.toml
            trigger_tag_pattern: ${{ steps.toml.outputs.trigger_tag_pattern }}
            skip_approval: ${{ steps.toml.outputs.release_skip_approval }}
            release_assets_include: ${{ steps.toml.outputs.release_assets_include }}
            release_assets_exclude: ${{ steps.toml.outputs.release_assets_exclude }}
            check_runs_on: ${{ steps.toml.outputs.check_runs-on }}
            check_run_script: ${{ steps.toml.outputs.check_run_script }}
            check_cache_enable: ${{ steps.toml.outputs.check_features_cache_enable }}
            check_cache_path: ${{ steps.toml.outputs.check_features_cache_path }}
            check_cache_key_file: ${{ steps.toml.outputs.check_features_cache_key_file }}
            build_runs_on: ${{ steps.toml.outputs.build_runs-on }}
            build_run_script: ${{ steps.toml.outputs.build_run_script }}
            build_cache_enable: ${{ steps.toml.outputs.build_features_cache_enable }}
            build_cache_path: ${{ steps.toml.outputs.build_features_cache_path }}
            build_cache_key_file: ${{ steps.toml.outputs.build_features_cache_key_file }}
        steps:
            - uses: actions/checkout@v5
            - name: Set up Python
              uses: actions/setup-python@v6
              with:
                  python-version: "3.12"
            - name: Install Python dependencies
              run: pip install PyYAML toml
            - name: Parse actions-config.yml
              id: yaml
              shell: python
              run: |
                  import yaml, json, os
                  with open('.github/actions-config.yml', 'r') as f:
                      data = yaml.safe_load(f)
                  check_matrix = json.dumps(data['check']['matrix'])
                  build_matrix = json.dumps(data['build']['matrix'])
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"check_matrix={check_matrix}\n")
                      f.write(f"build_matrix={build_matrix}\n")
            - name: Parse release-manifest.toml
              id: toml
              shell: python
              run: |
                  import toml, os
                  with open('.github/release-manifest.toml', 'r') as f:
                      data = toml.load(f)

                  def get_output_line(key, value):
                      if isinstance(value, bool):
                          value = str(value).lower()
                      return f"{key}={value}"

                  def set_multiline_output(f, key, value_list):
                      value = '\n'.join(value_list)
                      delimiter = 'GH_ACTIONS_EOF'
                      f.write(f"{key}<<{delimiter}\n")
                      f.write(f"{value}\n")
                      f.write(f"{delimiter}\n")

                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(get_output_line('trigger_tag_pattern', data['trigger']['tag_pattern']) + '\n')
                      f.write(get_output_line('release_skip_approval', data['release']['skip_approval']) + '\n')
                      
                      assets = data.get('release', {}).get('assets', {})
                      set_multiline_output(f, 'release_assets_include', assets.get('include', []))
                      set_multiline_output(f, 'release_assets_exclude', assets.get('exclude', []))
                      
                      f.write(get_output_line('check_runs-on', data['check']['runs-on']) + '\n')
                      f.write(get_output_line('check_run_script', data['check']['run_script']) + '\n')
                      f.write(get_output_line('check_features_cache_enable', data['check']['features']['cache']['enable']) + '\n')
                      f.write(get_output_line('check_features_cache_path', data['check']['features']['cache']['path']) + '\n')
                      f.write(get_output_line('check_features_cache_key_file', data['check']['features']['cache']['key_file']) + '\n')
                      f.write(get_output_line('build_runs-on', data['build']['runs-on']) + '\n')
                      f.write(get_output_line('build_run_script', data['build']['run_script']) + '\n')
                      f.write(get_output_line('build_features_cache_enable', data['build']['features']['cache']['enable']) + '\n')
                      f.write(get_output_line('build_features_cache_path', data['build']['features']['cache']['path']) + '\n')
                      f.write(get_output_line('build_features_cache_key_file', data['build']['features']['cache']['key_file']) + '\n')

    check:
        needs: parse_configs
        name: Check & Test
        runs-on: ${{ needs.parse_configs.outputs.check_runs_on }}
        strategy:
            matrix: ${{ fromJson(needs.parse_configs.outputs.check_matrix) }}
        steps:
            - uses: actions/checkout@v5
            - name: Cache dependencies
              if: needs.parse_configs.outputs.check_cache_enable == 'true'
              uses: actions/cache@v4
              with:
                  path: ${{ needs.parse_configs.outputs.check_cache_path }}
                  key: "${{ runner.os }}-pip-${{ hashFiles(needs.parse_configs.outputs.check_cache_key_file) }}"
            - name: Set up Python
              uses: actions/setup-python@v6
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Make check script executable
              run: chmod +x ${{ needs.parse_configs.outputs.check_run_script }}
            - name: Run Check Script
              shell: bash
              run: ${{ needs.parse_configs.outputs.check_run_script }}
              env:
                  PYTHON_VERSION: ${{ matrix.python-version }}
                  RUNNER_OS: ${{ matrix.os }}

    approval:
        name: Approve for Release
        needs: [parse_configs, check]
        if: needs.parse_configs.outputs.skip_approval == 'false'
        runs-on: ubuntu-latest
        environment: release
        steps:
            - name: Manual approval step
              run: echo "Release approved. Proceeding to build."

    build:
        name: Build Artifacts
        needs: [parse_configs, approval]
        if: always() && (needs.parse_configs.outputs.skip_approval == 'true' || needs.approval.result == 'success')
        runs-on: ${{ needs.parse_configs.outputs.build_runs_on }}
        strategy:
            matrix: ${{ fromJson(needs.parse_configs.outputs.build_matrix) }}
        steps:
            - uses: actions/checkout@v5
            - name: Cache dependencies
              if: needs.parse_configs.outputs.build_cache_enable == 'true'
              uses: actions/cache@v4
              with:
                  path: ${{ needs.parse_configs.outputs.build_cache_path }}
                  key: "${{ runner.os }}-pip-${{ hashFiles(needs.parse_configs.outputs.build_cache_key_file) }}"
            - name: Make build script executable
              run: chmod +x ${{ needs.parse_configs.outputs.build_run_script }}
            - name: Run Build Script
              shell: bash
              run: ${{ needs.parse_configs.outputs.build_run_script }}
              env:
                  TARGET: ${{ matrix.target }}
                  RUNNER_OS: ${{ matrix.os }}
            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: release-artifacts
                  path: ${{ needs.parse_configs.outputs.release_assets_include }}

    release:
        name: Create GitHub Release
        needs: build
        if: success()
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5
              with:
                  fetch-depth: 0
            - name: Download all artifacts
              uses: actions/download-artifact@v3
              with:
                  name: release-artifacts
                  path: .
            - name: Set up Python
              uses: actions/setup-python@v6
              with:
                  python-version: "3.12"
            - name: Install dependencies
              run: pip install toml pytz
            - name: Generate Release Notes
              id: notes_generator
              run: |
                  echo "body<<EOF" >> $GITHUB_OUTPUT
                  python .github/release.d/generate-release-notes.py >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
              env:
                  GITHUB_REPOSITORY: ${{ github.repository }}
                  GITHUB_REF_NAME: ${{ github.ref_name }}
                  MANIFEST_PATH: ".github/release-manifest.toml"
            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ github.event.inputs.tag }}
                  body: ${{ steps.notes_generator.outputs.body }}
                  files: ${{ needs.parse_configs.outputs.release_assets_include }}
