# GlocalText Configuration File
#
# This file provides a complete example of the "Firewall-Style" rules system.
# For a detailed explanation of each parameter, please refer to the README.md file.

# ===================================================================
# 1. Provider Settings
# ===================================================================
# Define API keys and default parameters for translation providers.
providers:
  gemini:
    # API key will be read from here first.
    # If not provided, it will fall back to the GEMINI_API_KEY environment variable.
    # api_key: GEMINI_API_KEY
    model: "gemini-2.5-flash-lite"

# ===================================================================
# 2. Translation Tasks
# ===================================================================
# Define a list of translation jobs. Each job is a self-contained task.
tasks:
- name: "Translate Markdown Docs to Traditional Chinese"
  enabled: true
  source_lang: "en"
  target_lang: "zh-TW"

  # -----------------------------------------------------------------
  # Custom Prompts (Optional)
  # -----------------------------------------------------------------
  # Override the default system and user prompts for this task.
  # The `{text}` placeholder will be replaced with the content to translate.
  prompts:
    system: "You are a professional technical translator who translates English into Traditional Chinese. Your goal is to produce translations that are accurate, fluent, and adhere to the established terminology of the target context. You will be given a markdown file to translate. Preserve the original markdown formatting, including line breaks, code blocks, and other structural elements. Only translate the text content."
    user: "Translate the following markdown text: {text}"

  # -----------------------------------------------------------------
  # Incremental Translation (Optional)
  # -----------------------------------------------------------------
  # Enable this to translate only new or changed content, saving time
  # and cost. A cache file (.glocaltext_cache.json) will be created.
  # Set to `true` to enable.
  incremental: false

  # (Optional) Override the default cache file location for this task.
  # The path must be a directory. The cache file will be named .glocaltext_cache.json.
  # cache_path: "/path/to/your/task_specific_cache_dir/"
  # -----------------------------------------------------------------
  # File Selection
  # -----------------------------------------------------------------
  source:
    include:
    - "docs/**/*.md"
    # exclude:
    #   - "docs/internal/**"

    # -----------------------------------------------------------------
    # Text Extraction
    # -----------------------------------------------------------------
  extraction_rules:
  - "(?<=## ).+" # Translate all H2 headers
  - "(?<=### ).+" # Translate all H3 headers
  - "^[A-Za-z].*" # Translate paragraphs that start with a letter
  # -----------------------------------------------------------------
  # Output Configuration
  # -----------------------------------------------------------------
  output:
    in_place: false
    path: "docs/zh-TW/"
    # New: Use a template for the output filename.
    # Available placeholders: {stem}, {ext}, {source_lang}, {target_lang}
    # If `filename` is provided, `filename_suffix` is ignored.
    filename: "{stem}_{target_lang}{ext}"
    # Legacy: Suffix to append to the original filename.
    # filename_suffix: "_zh-TW"

    # -----------------------------------------------------------------
    # Firewall Rules
    # -----------------------------------------------------------------
  rules:
  # Rule 1: Protect brand names using an `exact` match.
  # This rule skips translation if the text is exactly "GlocalText" or "Gemini".
  - match:
      exact: [ "GlocalText", "Gemini" ]
    action:
      action: "skip"

  # Rule 2: Skip technical notes using a `contains` match.
  # This rule skips translation if the text contains "NOTE:", preventing
  # technical annotations from being translated.
  - match:
      contains: "NOTE:"
    action:
      action: "skip"

  # Rule 3: Provide an authoritative translation using an `exact` match.
  - match:
      exact: "firewall-style `rules` system"
    action:
      action: "replace"
      value: "防火牆風格的 `rules` 系統"

  # Rule 4: Pre-process text with `modify` before translation.
  # This rule finds a complex shell command and simplifies it. The modified
  # text is then passed to the next rule or the translator.
  - match:
      contains: "uptime -p | sed -E 's/^up //; s/ years?/y/g; s/ months?/mo/g; s/ weeks?/w/g; s/ days?/d/g; s/ hours?/h/g; s/ minutes?/m/g; s/ seconds?/s/g; s/ +/ /g'"
    action:
      action: "modify"
      value: "uptime -p | sed 's/up //'"

  # Rule 5: Protect specific terms within a sentence from translation.
  # The `protect` action ensures that certain words (e.g., brand names, variables)
  # are not translated, while the rest of the sentence is.
  - match:
      contains: "GlocalText"
    action:
      action: "protect"

  # Rule 6: Use regex for complex, multi-line matching and replacement.
  # This rule finds a multi-line code block and replaces its content
  # while preserving the surrounding markers.
  - match:
      # (?s) is a flag that makes '.' match newlines.
      regex: '(?s)```python\n(.*?)\n```'
    action:
      action: "replace"
      # The value can be a multi-line string.
      # \1 is a backreference to the first capture group (.*?) in the regex.
      value: |
        ```python
        # The original content was replaced by this rule.
        # Original content: \1
        print("Hello, GlocalText!")
        ```
